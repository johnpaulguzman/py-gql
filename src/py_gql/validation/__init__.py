# -*- coding: utf-8 -*-
"""
Validation of GraphQL (query) documents.

Note:
    This module is only concerned with validating query documents, not SDL
    documents which are validated when using `py_gql.build_schema` and
    :meth:`py_gql.schema.Schema.validate`.
"""

from typing import Any, Callable, Dict, List, Optional, Sequence, Type

from py_gql.exc import ValidationError
from py_gql.lang import ast as _ast
from py_gql.lang.visitor import ChainedVisitor
from py_gql.schema import Schema
from py_gql.validation import rules as _rules
from py_gql.validation.visitors import TypeInfoVisitor, ValidationVisitor


Validator = Callable[[Schema, _ast.Document], List[ValidationError]]

SPECIFIED_RULES = (
    _rules.ExecutableDefinitionsChecker,
    _rules.UniqueOperationNameChecker,
    _rules.LoneAnonymousOperationChecker,
    _rules.SingleFieldSubscriptionsChecker,
    _rules.KnownTypeNamesChecker,
    _rules.FragmentsOnCompositeTypesChecker,
    _rules.VariablesAreInputTypesChecker,
    _rules.ScalarLeafsChecker,
    _rules.FieldsOnCorrectTypeChecker,
    _rules.UniqueFragmentNamesChecker,
    _rules.KnownFragmentNamesChecker,
    _rules.NoUnusedFragmentsChecker,
    _rules.PossibleFragmentSpreadsChecker,
    _rules.NoFragmentCyclesChecker,
    _rules.UniqueVariableNamesChecker,
    _rules.NoUndefinedVariablesChecker,
    _rules.NoUnusedVariablesChecker,
    _rules.KnownDirectivesChecker,
    _rules.UniqueDirectivesPerLocationChecker,
    _rules.KnownArgumentNamesChecker,
    _rules.UniqueArgumentNamesChecker,
    _rules.ValuesOfCorrectTypeChecker,
    _rules.ProvidedRequiredArgumentsChecker,
    _rules.VariablesInAllowedPositionChecker,
    _rules.OverlappingFieldsCanBeMergedChecker,
    _rules.UniqueInputFieldNamesChecker,
)


def validate_with_rules(
    schema: Schema,
    document: _ast.Document,
    *,
    variables: Optional[Dict[str, Any]] = None,
    rules: Sequence[Type[ValidationVisitor]] = ()
) -> List[ValidationError]:
    """
    Validate a GraphQL document using a collection of :class:`ValidationVisitor`.

    This uses a chain of :class:`~py_gql.validation.ValidationVisitor` classes,
    collecting all errors by passing the document through all visitors in order.
    The ordering allows visitors to rely on previous visitors having filtered
    out invalid nodes.

    By default this covers all the rules defined in the `specification
    <http://spec.graphql.org/June2018/#sec-Validation>`_.

    Warning:
        The default validation rules assume the ast is a document generated by
        :func:`py_gql.lang.parse` (as opposed to manually constructed) and will
        most likely break unexpectedly if that's not the case.

    Args:
        schema: Schema to validate against (for known types, directives, etc.).
        document: The parse tree root.
        variables: Raw, JSON decoded variables parsed from the request.
        rules: Set of validation rules to use.

    Returns:
        Collected validation errors.
    """
    rules = rules or SPECIFIED_RULES
    type_info = TypeInfoVisitor(schema)

    visitors = [cls(schema, type_info) for cls in rules]

    # Type info NEEDS to be first to be accurately used inside other validators
    # so when a validator enters node the type stack has already been updated.
    validator = ChainedVisitor(type_info, *visitors)
    validator.visit(document)

    return [error for visitor in visitors for error in visitor.errors]


def default_validator(
    schema: Schema,
    document: _ast.Document,
    variables: Optional[Dict[str, Any]] = None,
) -> List[ValidationError]:
    """
    Default validator implementation matching the spec. This an alias to
    :func:`~py_gql.validation.validate_with_rules`.
    """
    return validate_with_rules(
        schema,
        document,
        variables=variables,
        rules=SPECIFIED_RULES,
    )


__all__ = (
    "default_validator",
    "Validator",
    "validate_with_rules",
    "ValidationVisitor",
    "SPECIFIED_RULES",
)
